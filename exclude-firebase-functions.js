const fs = require('fs');
const path = require('path');

// Create a module map resolver for Metro
const createModuleMapResolver = () => {
  const moduleMapPath = path.join(__dirname, 'metro.module-mapper.js');
  const emptyMockPath = path.resolve(__dirname, 'app/lib/utils/empty-firebase-functions.js').replace(/\\/g, '/'); // Use forward slashes for consistency

  // Ensure the empty mock file exists (create if not)
  const emptyMockDir = path.dirname(emptyMockPath);
  if (!fs.existsSync(emptyMockDir)) {
    fs.mkdirSync(emptyMockDir, { recursive: true });
  }
  if (!fs.existsSync(emptyMockPath)) {
    fs.writeFileSync(emptyMockPath, 'module.exports = {}; // Empty mock\n');
    console.log(`Created empty mock file at ${emptyMockPath}`);
  }

  const content = `
// This file is auto-generated by exclude-firebase-functions.js - do not modify
const path = require('path');

module.exports = {
  moduleMap: {
    'firebase-functions': '${emptyMockPath}',
    'firebase-functions/v1': '${emptyMockPath}',
    'firebase-functions/v2': '${emptyMockPath}',
    'firebase-functions/v2/https': '${emptyMockPath}',
    'firebase-functions/v2/scheduler': '${emptyMockPath}',
    'firebase-functions/v2/logger': '${emptyMockPath}',
    'firebase-admin': '${emptyMockPath}',
    'firebase-admin/messaging': '${emptyMockPath}'
    // Add other firebase-admin subpaths if needed
  }
};
`;
  fs.writeFileSync(moduleMapPath, content);
  console.log(`Created/Updated module map resolver at ${moduleMapPath}`);
};

// Execute the function
createModuleMapResolver();

console.log('exclude-firebase-functions.js executed successfully.');
